# This is the main makefile
#
# Command-line interface is loosely copied from the TinyOS make system:
# http://tinyos.stanford.edu/tinyos-wiki/index.php/TinyOS_Toolchain

# _______________________ User overridable configuration _______________________

PROJECT_NAME            ?= my_bleeding_edge_project

VERSION_MAJOR           ?= 0
VERSION_MINOR           ?= 0
VERSION_PATCH           ?= 1

# Common build options
CFLAGS                  += -Wall -std=c99 -specs=nano.specs -specs=nosys.specs -ffunction-sections -fdata-sections -ffreestanding -fsingle-precision-constant -Wstrict-aliasing=0 -D__START=main -D__STARTUP_CLEAR_BSS -DVTOR_START_LOCATION=$(APP_START) -DLIBEXPORT=""

# If set, disables asserts and debugging, enables optimization
RELEASE_BUILD           ?= 1

LDFLAGS                 += -nostartfiles -Wl,--gc-sections -Wl,--relax -Wl,-Map=$(@:.elf=.map),--cref -Wl,--wrap=atexit -Wl,--section-start=.text=$(APP_START)
LDLIBS                  += -lgcc -lm -lnosys
INCLUDES                += -Xassembler -I$(BUILD_DIR) -Ilib

# Enable debug messages
VERBOSE                  ?= 0
# Disable info messages
#SILENT                   ?= 1

# Destination for build results
BUILD_BASE_DIR          := build
# Mark the default target
DEFAULT_BUILD_TARGET    := all

# Silabs SDK location and version
SILABS_SDKDIR           ?= silabs.sdk/v2.5

# Configure resulting image
PROGRAM_IMAGE            = $(BUILD_DIR)/$(PROJECT_NAME).bin
PROGRAM_DEST_ADDR        = $(APP_START)

# Other external tools
HEADEREDIT              := headeredit

# Pull in the developer's private configuration overrides for items above
-include Makefile.private

# _______________________ Non-overridable configuration _______________________

BUILD_DIR                = $(BUILD_BASE_DIR)/$(BUILD_TARGET)
PLATFORMS_TREE          := thinnect.buildsystem/make
PHONY_GOALS             := all clean
TARGETLESS_GOALS        += clean
UUID_APPLICATION        := 00000000-0000-0000-0000-000000000000

VERSION_BIN             := $(shell printf "%02X" $(VERSION_MAJOR))$(shell printf "%02X" $(VERSION_MINOR))$(shell printf "%02X" $(VERSION_PATCH))
VERSION_STR             := "$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH)"
BUILD_TIMESTAMP         := $(shell date '+%s')

# List all source files in the project
SOURCES =  \
    my_bleeding_edge_project_main.c

# Sources for dependencies and Silabs EMLIB, RAIL
SOURCES += \
    thinnect.device-signature/signature/DeviceSignature.c \
    thinnect.device-signature/area/silabs/SignatureArea.c \
    hal/retargetserial.c \
    hal/retargetio.c \
    prolab.motexml/lib/MLO.c \
    prolab.motexml/lib/MLE.c \
    prolab.motexml/lib/MLD.c \
    prolab.motexml/lib/MLI.c \
    $(SILABS_SDKDIR)/util/silicon_labs/silabs_core/queue/circular_queue.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_system.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_core.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_emu.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_cmu.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_rmu.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_gpio.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_usart.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_ldma.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_msc.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_i2c.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_wdog.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_rtcc.c \
    $(SILABS_SDKDIR)/platform/emlib/src/em_adc.c \
    $(SILABS_SDKDIR)/platform/emdrv/rtcdrv/src/rtcdriver.c

# All include directories
INCLUDES += -Ithinnect.silabs_platform \
    -Iprotocol \
    -Ithinnect.device-signature/signature/ \
    -Ithinnect.device-signature/area/ \
    -Ithinnect.device-signature/area/file/ \
    -Icrc \
    -Ihal \
    -Irebane.headeredit/lib \
    -I. \
    -Ithinnect.tos-deviceannouncement/tos/types \
    -Iprolab.dt-types \
    -Iprolab.motexml/lib \
    -I$(SILABS_SDKDIR)/util/silicon_labs/silabs_core/queue \
    -I$(SILABS_SDKDIR)/hardware/kit/common/drivers \
    -I$(SILABS_SDKDIR)/platform/halconfig/inc/hal-config \
    -I$(SILABS_SDKDIR)/platform/emlib/inc \
    -I$(SILABS_SDKDIR)/platform/radio/rail_lib/hal \
    -I$(SILABS_SDKDIR)/platform/radio/rail_lib/common \
    -I$(SILABS_SDKDIR)/platform/radio/rail_lib/protocol/ieee802154 \
    -I$(SILABS_SDKDIR)/platform/radio/rail_lib/plugin/pa-conversions \
    -I$(SILABS_SDKDIR)/platform/emdrv/rtcdrv/inc \
    -I$(SILABS_SDKDIR)/platform/emdrv/rtcdrv/config \
    -I$(SILABS_SDKDIR)/platform/emdrv/common/inc \

# Pull in the grunt work
include $(PLATFORMS_TREE)/Makerules

# Ensure "header.bin" does not exist in the project root dir. It must
# live in the subtree for a give build configuration under "build/xyz".
# Otherwise we risk including the header for a wrong platform.
ifneq ("$(wildcard header.bin)","")
  $(error "Found file [header.bin] in project root directory. Please remove it to avoid accidental header spoofing")
endif

$(call passVarToCpp,CFLAGS,VERSION_MAJOR)
$(call passVarToCpp,CFLAGS,VERSION_MINOR)
$(call passVarToCpp,CFLAGS,VERSION_PATCH)
$(call passVarToCpp,CFLAGS,VERSION_STR)

# _______________________________ Project rules _______________________________

all: $(BUILD_DIR)/$(PROJECT_NAME).bin

# Only the object file calling INCLUDE_BINARY_FILE depends on file header.bin,
# but instead of manually mapping this dependency, it's simpler to add it as a
# dependency to all objects.
$(OBJECTS): $(BUILD_DIR)/header.bin

$(BUILD_DIR)/$(PROJECT_NAME).elf: Makefile | $(BUILD_DIR)

$(BUILD_DIR)/header.bin: | $(BUILD_DIR)
	$(call pInfo,Creating headeredit block for application [$@])
	$(HEADEREDIT) -c -v softtype,1 -v firmaddr,$(APP_START) -v firmsizemax,$(APP_MAX_LEN) -v version,$(VERSION_STR) -v versionbin,$(VERSION_BIN) -v uuid,$(UUID_BOARD) -v uuid2,$(UUID_PLATFORM) -v uuid3,$(UUID_APPLICATION) -v timestamp,$(BUILD_TIMESTAMP) -v name,$(PROJECT_NAME) -v size -v crc "$@"

$(BUILD_DIR)/$(PROJECT_NAME).elf: $(BUILD_DIR)/header.bin $(OBJECTS)
	$(call pInfo,Linking [$@])
	$(HIDE_CMD)$(CC) $(CFLAGS) $(INCLUDES) $(OBJECTS) $(LDLIBS) $(LDFLAGS) -o $@

$(BUILD_DIR)/$(PROJECT_NAME).bin: $(BUILD_DIR)/$(PROJECT_NAME).elf
	$(call pInfo,Exporting [$@])
	$(HIDE_CMD)$(TC_SIZE) --format=Berkeley $<
	$(HIDE_CMD)$(TC_OBJCOPY) --strip-all -O binary "$<" "$@"
	$(HIDE_CMD)$(HEADEREDIT) -C -v size -v crc $@

$(BUILD_DIR):
	$(call pInfo,Creating [$@])
	@mkdir -p "$@"

# _______________________________ Utility rules ________________________________

clean:
	$(call pInfo,Nuking everything in [$(BUILD_BASE_DIR)])
	@-rm -rf "$(BUILD_BASE_DIR)"

.PHONY: $(PHONY_GOALS)
